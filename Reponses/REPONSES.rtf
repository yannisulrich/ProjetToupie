P1.1:
La classe vecteur contient simplement un vecteur comme attribut.
Seules les méthodes de l'énoncé du problème (augmente, set_coord, affiche, compare) sont publiques. Des exceptions et
messages d'erreurs sont implémentés pour lancer une erreur en cas d'entrée invalide.

P1.2
Les opérations entre vecteurs de dimension différentes lancent une erreur. Ceci a été choisi car il nous semble que
cette opération ne devrait pas être l'intention du codeur par la suite.

P4.1
Le constructeur de copie par défaut suffit à nos besoins, nous l'avons donc pas redéfini.

P4.2
Comme nous voulons avoir la possibilité de faire des opérations entre nos vecteurs, il faut faire un choix exclusif entre
représentation cartésienne ou sphérique. Cela impliquerai qu'une méthode de construction en coordonnées sphériques devrait faire une conversion,
ce qui ne devrait peut-être pas appartenir au constructeur. TODO: comprendre cette question :,-)


P6.1
Nous avons choisi de l'implémenter comme sous-classe de la classe Toupie. Ce choix nous semblait le plus logique car ConeSimple
est physiquement bien un type de toupie.

P7.1
La céasse contient deux méthodes virtuelles pures nomées integrate et integrateMultiple, qui font ce qu'on imagine. La réflexion
principale ici est d'attribuer la fonction d'évolution f à la bonne classe, c'est à dire soit à la toupie, soit à l'intégrateur.
Les deux ont leurs avantages suivant la situation, mais dans l'intérêt d'avoir le moins de code à double, nous avons décidé
de faire appartenir la fonction à la toupie, pour pouvoir intégrer un système entier avec un seul intégrateur.

P7.2
IntegrateurEulerCromer herite (en public) de Integrateur.


P8.1
Le type de méthode que nous avons choisi d'implémenter est une méthode virtuelle (pure pour SupportADessin et Dessinable), car:
- nous avons besoin de polymorphisme
- Dessiner un objet de la classe Dessinable n'a pas de sens, il faut savoir dans quelle sous-classe on se situe.

P8.2
Nous utilisons le polymorphisme grâce à la classe abstraite Integrateur. De cette manière la

P8.3
Il faut faire attention aux copies d'objets et au destructeur. Par la règle des 3, nous avons aussi explicité le "copy assignment operator".
Nous avons opté d'interdire la copie, et que le destructeur ne detruise pas les toupies, uniquement les références. Nous interdisons la copie
car elle n'a pas vraiment de sens dans notre scenario, et ceci évite donc des erreurs.

P8.4
La classe système contient un vecteur de pointeurs sur des toupies.

P11.1
La méthode calculant les divers indicateurs fera partie de la classe Toupie, car leur calcul est propre au type de toupie.